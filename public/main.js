!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/public/",n(n.s=1)}([function(t,e,n){
/* Riot v3.13.2, @license MIT */
!function(t){"use strict";function e(t,e){return(e||document).querySelector(t)}var n,i,r=[],o={},s="yield",a="__global_mixin",u="riot-",l=["ref","data-ref"],c="data-is",d="if",p="each",f="no-reorder",h="show",m="hide",v="key",g="__riot-events__",b="string",y="object",_="undefined",x="function",w="http://www.w3.org/1999/xlink",k="http://www.w3.org/2000/svg",E=/^xlink:(\w+)/,A=typeof window===_?void 0:window,N=/^on/,C=/([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g,O={viewbox:"viewBox",preserveaspectratio:"preserveAspectRatio"},S=/^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/,I=0|(A&&A.document||{}).documentMode;function M(t){return"svg"===t?document.createElementNS(k,t):document.createElement(t)}function T(t,e,n){var i=E.exec(e);i&&i[1]?t.setAttributeNS(w,i[1],n):t.setAttribute(e,n)}var L,j,P={},H=!1;A&&(L=M("style"),j=e("style[type=riot]"),T(L,"type","text/css"),j?(j.id&&(L.id=j.id),j.parentNode.replaceChild(L,j)):document.head.appendChild(L),i=(n=L).styleSheet);var R={styleNode:n,add:function(t,e){P[e]=t,H=!0},inject:function(){if(A&&H){H=!1;var t=Object.keys(P).map(function(t){return P[t]}).join("\n");i?i.cssText=t:n.innerHTML=t}},remove:function(t){delete P[t],H=!0}},$=function(){var t="[{(,;:?=|&!^~>%*/",e=["case","default","do","else","in","instanceof","prefix","return","typeof","void","yield"],n=e.reduce(function(t,e){return t+e.slice(-1)},""),i=/^\/(?=[^*>\/])[^[\/\\]*(?:(?:\\.|\[(?:\\.|[^\]\\]*)*\])[^[\\\/]*)*?\/[gimuy]*/,r=/[$\w]/;function o(t,e){for(;--e>=0&&/\s/.test(t[e]););return e}return function(s,a){var u=/.*/g,l=u.lastIndex=a++,c=u.exec(s)[0].match(i);if(c){var d=l+c[0].length;l=o(s,l);var p=s[l];if(l<0||~t.indexOf(p))return d;if("."===p)"."===s[l-1]&&(a=d);else if("+"===p||"-"===p)(s[--l]!==p||(l=o(s,l))<0||!r.test(s[l]))&&(a=d);else if(~n.indexOf(p)){for(var f=l+1;--l>=0&&r.test(s[l]););~e.indexOf(s.slice(l+1,f))&&(a=d)}}return a}}(),V=function(t){var e,n,i="g",r=/"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|`[^`\\]*(?:\\[\S\s][^`\\]*)*`/g,o=r.source+"|"+/(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source+"|"+/\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?([^<]\/)[gim]*/.source,s=RegExp("[\\x00-\\x1F<>a-zA-Z0-9'\",;\\\\]"),a=/(?=[[\]()*+?.^$|])/g,u=r.source+"|"+/(\/)(?![*\/])/.source,l={"(":RegExp("([()])|"+u,i),"[":RegExp("([[\\]])|"+u,i),"{":RegExp("([{}])|"+u,i)},c="{ }",d=["{","}","{","}",/{[^}]*}/,/\\([{}])/g,/\\({)|{/g,RegExp("\\\\(})|([[({])|(})|"+u,i),c,/^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,/(^|[^\\]){=[\S\s]*?}/],p=void 0,f=[];function h(t){return t}function m(t,e){return e||(e=f),new RegExp(t.source.replace(/{/g,e[2]).replace(/}/g,e[3]),t.global?i:"")}function v(t){if(t===c)return d;var e=t.split(" ");if(2!==e.length||s.test(t))throw new Error('Unsupported brackets "'+t+'"');return(e=e.concat(t.replace(a,"\\").split(" ")))[4]=m(e[1].length>1?/{[\S\s]*?}/:d[4],e),e[5]=m(t.length>3?/\\({|})/g:d[5],e),e[6]=m(d[6],e),e[7]=RegExp("\\\\("+e[3]+")|([[({])|("+e[3]+")|"+u,i),e[8]=t,e}function g(t){return t instanceof RegExp?e(t):f[t]}function b(t){(t||(t=c))!==f[8]&&(f=v(t),e=t===c?h:m,f[9]=e(d[9])),p=t}return g.split=function(t,e,n){n||(n=f);var i,r,o,s,a,u,c=[],d=n[6],p=[],h="";for(r=o=d.lastIndex=0;i=d.exec(t);){if(u=d.lastIndex,s=i.index,r){if(i[2]){var m=i[2],v=l[m],g=1;for(v.lastIndex=u;i=v.exec(t);)if(i[1]){if(i[1]===m)++g;else if(!--g)break}else v.lastIndex=y(i.index,v.lastIndex,i[2]);d.lastIndex=g?t.length:v.lastIndex;continue}if(!i[3]){d.lastIndex=y(s,u,i[4]);continue}}i[1]||(b(t.slice(o,s)),o=d.lastIndex,(d=n[6+(r^=1)]).lastIndex=o)}return t&&o<t.length&&b(t.slice(o)),c.qblocks=p,c;function b(t){h&&(t=h+t,h=""),e||r?c.push(t&&t.replace(n[5],"$1")):c.push(t)}function y(n,i,r){return r&&(i=$(t,n)),e&&i>n+2&&(a="⁗"+p.length+"~",p.push(t.slice(n,i)),h+=t.slice(o,n)+a,o=i),i}},g.hasExpr=function(t){return f[4].test(t)},g.loopKeys=function(t){var e=t.match(f[9]);return e?{key:e[1],pos:e[2],val:f[0]+e[3].trim()+f[1]}:{val:t.trim()}},g.array=function(t){return t?v(t):f},Object.defineProperty(g,"settings",{set:function(t){var e;e=(t=t||{}).brackets,Object.defineProperty(t,"brackets",{set:b,get:function(){return p},enumerable:!0}),n=t,b(e)},get:function(){return n}}),g.settings="undefined"!=typeof riot&&riot.settings||{},g.set=b,g.skipRegex=$,g.R_STRINGS=r,g.R_MLCOMMS=/\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g,g.S_QBLOCKS=o,g.S_QBLOCK2=u,g}(),F=function(){var t={};function e(r,o){return r?(t[r]||(t[r]=function(t){var e=function(t){var e,r=V.split(t.replace(n,'"'),1),o=r.qblocks;if(r.length>2||r[0]){var a,u,l=[];for(a=u=0;a<r.length;++a)(e=r[a])&&(e=1&a?s(e,1,o):'"'+e.replace(/\\/g,"\\\\").replace(/\r\n?|\n/g,"\\n").replace(/"/g,'\\"')+'"')&&(l[u++]=e);e=u<2?l[0]:"["+l.join(",")+'].join("")'}else e=s(r[1],0,o);return o.length&&(e=e.replace(i,function(t,e){return o[e].replace(/\r/g,"\\r").replace(/\n/g,"\\n")})),e}(t);return"try{return "!==e.slice(0,11)&&(e="return "+e),new Function("E",e+";")}(r))).call(o,function(t,n){t.riotData={tagName:n&&n.__&&n.__.tagName,_riot_id:n&&n._riot_id},e.errorHandler?e.errorHandler(t):"undefined"!=typeof console&&"function"==typeof console.error&&(console.error(t.message),console.log("<%s> %s",t.riotData.tagName||"Unknown tag",this.tmpl),console.log(this.data))}.bind({data:o,tmpl:r})):r}e.hasExpr=V.hasExpr,e.loopKeys=V.loopKeys,e.clearCache=function(){t={}},e.errorHandler=null;var n=/\u2057/g,i=/\u2057(\d+)~/g,r=/^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/,o={"(":/[()]/g,"[":/[[\]]/g,"{":/[{}]/g};function s(t,e,n){if(t=t.replace(/\s+/g," ").trim().replace(/\ ?([[\({},?\.:])\ ?/g,"$1")){for(var i,s=[],a=0;t&&(i=t.match(r))&&!i.index;){var u,l,d=/,|([[{(])|$/g;for(t=RegExp.rightContext,u=i[2]?n[i[2]].slice(1,-1).trim().replace(/\s+/g," "):i[1];l=(i=d.exec(t))[1];)p(l,d);l=t.slice(0,i.index),t=RegExp.rightContext,s[a++]=c(l,1,u)}t=a?a>1?"["+s.join(",")+'].join(" ").trim()':s[0]:c(t,e)}return t;function p(e,n){var i,r=1,s=o[e];for(s.lastIndex=n.lastIndex;i=s.exec(t);)if(i[0]===e)++r;else if(!--r)break;n.lastIndex=r?t.length:s.lastIndex}}var a='"in this?this:'+("object"!=typeof window?"global":"window")+").",u=/[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g,l=/^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;function c(t,e,n){var i;return t=t.replace(u,function(t,e,n,r,o){return n&&(r=i?0:r+t.length,"this"!==n&&"global"!==n&&"window"!==n?(t=e+'("'+n+a+n,r&&(i="."===(o=o[r])||"("===o||"["===o)):r&&(i=!l.test(o.slice(r)))),t}),i&&(t="try{return "+t+"}catch(e){E(e,this)}"),n?t=(i?"function(){"+t+"}.call(this)":"("+t+")")+'?"'+n+'":""':e&&(t="function(v){"+(i?t.replace("return ","v="):"v=("+t+")")+';return v||v===0?v:""}.call(this)'),t}return e.version=V.version="v3.0.8",e}(),z=function(t){t=t||{};var e={},n=Array.prototype.slice;return Object.defineProperties(t,{on:{value:function(n,i){return"function"==typeof i&&(e[n]=e[n]||[]).push(i),t},enumerable:!1,writable:!1,configurable:!1},off:{value:function(n,i){if("*"!=n||i)if(i)for(var r,o=e[n],s=0;r=o&&o[s];++s)r==i&&o.splice(s--,1);else delete e[n];else e={};return t},enumerable:!1,writable:!1,configurable:!1},one:{value:function(e,n){return t.on(e,function i(){t.off(e,i),n.apply(t,arguments)})},enumerable:!1,writable:!1,configurable:!1},trigger:{value:function(i){var r,o,s,a=arguments,u=arguments.length-1,l=new Array(u);for(s=0;s<u;s++)l[s]=a[s+1];for(r=n.call(e[i]||[],0),s=0;o=r[s];++s)o.apply(t,l);return e["*"]&&"*"!=i&&t.trigger.apply(t,["*",i].concat(l)),t},enumerable:!1,writable:!1,configurable:!1}}),t};function U(t,e){return Object.getOwnPropertyDescriptor(t,e)}function D(t){return typeof t===_}function B(t,e){var n=U(t,e);return D(t[e])||n&&n.writable}function q(t){for(var e,n=1,i=arguments,r=i.length;n<r;n++)if(e=i[n])for(var o in e)B(t,o)&&(t[o]=e[o]);return t}function K(t){return Object.create(t)}var J=q(K(V.settings),{skipAnonymousTags:!0,keepValueAttributes:!1,autoUpdate:!0});function X(t,e){return[].slice.call((e||document).querySelectorAll(t))}function Y(){return document.createTextNode("")}function Z(t,e){t.style.display=e?"":"none",t.hidden=!e}function G(t,e){return t.getAttribute(e)}function Q(t,e){t.removeAttribute(e)}function W(t,e,n){if(n){var i=t.ownerDocument.importNode((new DOMParser).parseFromString('<svg xmlns="'+k+'">'+e+"</svg>","application/xml").documentElement,!0);t.appendChild(i)}else t.innerHTML=e}function tt(t,e){if(t)for(var n;n=C.exec(t);)e(n[1].toLowerCase(),n[2]||n[3]||n[4])}function et(){return document.createDocumentFragment()}function nt(t,e,n){t.insertBefore(e,n.parentNode&&n)}function it(t){return Object.keys(t).reduce(function(e,n){return e+" "+n+": "+t[n]+";"},"")}function rt(t,e,n){if(t){var i,r=e(t,n);if(!1===r)return;for(t=t.firstChild;t;)i=t.nextSibling,rt(t,e,r),t=i}}var ot=Object.freeze({$$:X,$:e,createDOMPlaceholder:Y,mkEl:M,setAttr:T,toggleVisibility:Z,getAttr:G,remAttr:Q,setInnerHTML:W,walkAttrs:tt,createFrag:et,safeInsert:nt,styleObjectToString:it,walkNodes:rt});function st(t){return D(t)||null===t}function at(t){return st(t)||""===t}function ut(t){return typeof t===x}function lt(t){return t&&typeof t===y}function ct(t){var e=t.ownerSVGElement;return!!e||null===e}function dt(t){return Array.isArray(t)||t instanceof Array}function pt(t){return S.test(t)}function ft(t){return typeof t===b}var ht=Object.freeze({isBlank:at,isFunction:ut,isObject:lt,isSvg:ct,isWritable:B,isArray:dt,isBoolAttr:pt,isNil:st,isString:ft,isUndefined:D});function mt(t,e){return-1!==t.indexOf(e)}function vt(t,e){for(var n=t?t.length:0,i=0;i<n;i++)e(t[i],i);return t}function gt(t,e){return t.slice(0,e.length)===e}var bt,yt=(bt=-1,function(){return++bt});function _t(t,e,n,i){return Object.defineProperty(t,e,q({value:n,enumerable:!1,writable:!1,configurable:!0},i)),t}function xt(t){return t.replace(/-(\w)/g,function(t,e){return e.toUpperCase()})}function wt(t){console&&console.warn&&console.warn(t)}var kt=Object.freeze({contains:mt,each:vt,getPropDescriptor:U,startsWith:gt,uid:yt,defineProperty:_t,objectCreate:K,extend:q,toCamel:xt,warn:wt});function Et(t,e,n,i,r){var o=t[e],s=dt(o),a=!D(r);if(!o||o!==n)if(!o&&i)t[e]=[n];else if(o)if(s){var u=o.indexOf(n);if(u===r)return;-1!==u&&o.splice(u,1),a?o.splice(r,0,n):o.push(n)}else t[e]=[o,n];else t[e]=n}function At(t){return t.tagName&&o[G(t,c)||G(t,c)||t.tagName.toLowerCase()]}function Nt(t,e){var n=At(t),i=!e&&G(t,c);return i&&!F.hasExpr(i)?i:n?n.name:t.tagName.toLowerCase()}function Ct(){return this.parent?q(K(this),this.parent):this}var Ot=/<yield\b/i,St=/<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi,It=/<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi,Mt=/<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi,Tt={tr:"tbody",th:"tr",td:"tr",col:"colgroup"},Lt=I&&I<10?/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/:/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/,jt="div",Pt="svg";function Ht(t,n,i){var r=t&&t.match(/^\s*<([-\w]+)/),o=r&&r[1].toLowerCase(),s=M(i?Pt:jt);return t=function(t,e){if(!Ot.test(t))return t;var n={};return e=e&&e.replace(It,function(t,e,i){return n[e]=n[e]||i,""}).trim(),t.replace(Mt,function(t,e,i){return n[e]||i||""}).replace(St,function(t,n){return e||n||""})}(t,n),Lt.test(o)?s=function(t,n,i){var r="o"===i[0],o=r?"select>":"table>";if(t.innerHTML="<"+o+n.trim()+"</"+o,o=t.firstChild,r)o.selectedIndex=-1;else{var s=Tt[i];s&&1===o.childElementCount&&(o=e(s,o))}return o}(s,t,o):W(s,t,i),s}var Rt=/^on/;function $t(t){for(var e=t;e.__.isAnonymous&&e.parent;)e=e.parent;return e}function Vt(t,e,n,i){var r,o=function(t,e,n){var i=this.__.parent,r=this.__.item;if(!r)for(;i&&!r;)r=i.__.item,i=i.__.parent;if(B(n,"currentTarget")&&(n.currentTarget=t),B(n,"target")&&(n.target=n.srcElement),B(n,"which")&&(n.which=n.charCode||n.keyCode),n.item=r,e.call(this,n),J.autoUpdate&&!n.preventUpdate){var o=$t(this);o.isMounted&&o.update()}}.bind(i,n,e);n[t]=null,r=t.replace(N,""),mt(i.__.listeners,n)||i.__.listeners.push(n),n[g]||(n[g]={}),n[g][t]&&n.removeEventListener(r,n[g][t]),n[g][t]=o,n.addEventListener(r,o,!1)}function Ft(t,e,n,i){var r=be(t,e,n),o=e.tagName||Nt(e.root,!0),s=$t(i);return _t(r,"parent",s),r.__.parent=i,Et(s.tags,o,r),s!==i&&Et(i.tags,o,r),r}function zt(t,e,n,i){if(dt(t[e])){var r=t[e].indexOf(n);-1!==r&&t[e].splice(r,1),t[e].length?1!==t[e].length||i||(t[e]=t[e][0]):delete t[e]}else t[e]===n&&delete t[e]}function Ut(t,e){var n,i,r=Y(),o=Y(),s=et();for(this.root.insertBefore(r,this.root.firstChild),this.root.appendChild(o),this.__.head=i=r,this.__.tail=o;i;)n=i.nextSibling,s.appendChild(i),this.__.virts.push(i),i=n;e?t.insertBefore(s,e.__.head):t.appendChild(s)}function Dt(t,e){if(e.parentNode){var n=et();Ut.call(t,n),e.parentNode.replaceChild(n,e)}}function Bt(t){if(!this.root||!G(this.root,"virtualized")){var e,n=t.dom,i=function(t){return t?(t=t.replace(u,""),O[t]&&(t=O[t]),t):null}(t.attr),r=mt([h,m],i),s=t.root&&"VIRTUAL"===t.root.tagName,a=this.__,l=a.isAnonymous,c=n&&(t.parent||n.parentNode),d=J.keepValueAttributes,p="style"===i,f="class"===i,v="value"===i;if(t._riot_id)t.__.wasCreated?t.update():(t.mount(),s&&Dt(t,t.root));else{if(t.update)return t.update();var g=r&&!l?Ct.call(this):this,b=!at(e=F(t.expr,g)),y=lt(e);if(y&&(f?e=F(JSON.stringify(e),this):p&&(e=it(e))),!t.attr||t.wasParsedOnce&&!1!==e&&(b||v&&(!v||d))||Q(n,G(n,t.attr)?t.attr:i),t.bool&&(e=!!e&&i),t.isRtag)return function(t,e,n){var i,r=t.tag||t.dom._tag,s=(r?r.__:{}).head,a="VIRTUAL"===t.dom.tagName;r&&t.tagName===n?r.update():(r&&(a&&(i=Y(),s.parentNode.insertBefore(i,s)),r.unmount(!0)),ft(n)&&(t.impl=o[n],t.impl&&(t.tag=r=Ft(t.impl,{root:t.dom,parent:e,tagName:n},t.dom.innerHTML,e),vt(t.attrs,function(t){return T(r.root,t.name,t.value)}),t.tagName=n,r.mount(),a&&Dt(r,i||r.root),e.__.onUnmount=function(){var t=r.opts.dataIs;zt(r.parent.tags,t,r),zt(r.__.parent.tags,t,r),r.unmount()})))}(t,this,e);if((!t.wasParsedOnce||t.value!==e)&&(t.value=e,t.wasParsedOnce=!0,!y||f||p||r)){if(b||(e=""),!i)return e+="",void(c&&(t.parent=c,"TEXTAREA"===c.tagName?(c.value=e,I||(n.nodeValue=e)):n.nodeValue=e));switch(!0){case ut(e):_=i,Rt.test(_)&&Vt(i,e,n,this);break;case r:Z(n,i===m?!e:e);break;default:t.bool&&(n[i]=e),v&&n.value!==e?n.value=e:b&&!1!==e&&T(n,i,e),p&&n.hidden&&Z(n,!1)}var _}}}}function qt(t){vt(t,Bt.bind(this))}function Kt(t,e,n,i,r){if(!t||!n){var o=t?Ct.call(this):e||this;vt(r,function(t){t.expr&&Bt.call(o,t.expr),i[xt(t.name).replace(u,"")]=t.expr?t.expr.value:t.value})}}function Jt(t){if(!t){var e=Object.keys(o);return e+Jt(e)}return t.filter(function(t){return!/[^-\w]/.test(t)}).reduce(function(t,e){var n=e.trim().toLowerCase();return t+",["+c+'="'+n+'"]'},"")}function Xt(t,e){var n=this.name,i=this.tmpl,r=this.css,s=this.attrs,a=this.onCreate;return o[n]||(Yt(n,i,r,s,a),o[n].class=this.constructor),ye(t,n,e,this),r&&R.inject(),this}function Yt(t,e,n,i,r){return ut(i)&&(r=i,/^[\w-]+\s?=/.test(n)?(i=n,n=""):i=""),n&&(ut(n)?r=n:R.add(n,t)),t=t.toLowerCase(),o[t]={name:t,tmpl:e,attrs:i,fn:r},t}function Zt(t,e,n,i,r){return n&&R.add(n,t),o[t]={name:t,tmpl:e,attrs:i,fn:r},t}function Gt(t,e,n){var i,r,o=[];if(R.inject(),(lt(e)||ut(e))&&(n=e,e=0),ft(t)?(t="*"===t?r=Jt():t+Jt(t.split(/, */)),i=t?X(t):[]):i=t,"*"===e){if(e=r||Jt(),i.tagName)i=X(e,i);else{var s=[];vt(i,function(t){return s.push(X(e,t))}),i=s}e=0}return function t(i){if(i.tagName){var r,s=G(i,c);e&&s!==e&&(s=e,T(i,c,e)),(r=ye(i,s||i.tagName.toLowerCase(),ut(n)?n():n))&&o.push(r)}else i.length&&vt(i,t)}(i),o}var Qt={},Wt=Qt[a]={},te=0;function ee(t,e,n){if(lt(t))ee("__"+te+++"__",t,!0);else{var i=n?Wt:Qt;if(!e){if(D(i[t]))throw new Error("Unregistered mixin: "+t);return i[t]}i[t]=ut(e)?q(e.prototype,i[t]||{})&&e:q(i[t]||{},e)}}function ne(){return vt(r,function(t){return t.update()})}function ie(t){return R.remove(t),delete o[t]}var re=Object.freeze({Tag:Xt,tag:Yt,tag2:Zt,mount:Gt,mixin:ee,update:ne,unregister:ie,version:"v3.13.2"});function oe(t,e){var n,i=this.parent;i&&(dt(n=i.tags[t])?n.splice(e,0,n.splice(n.indexOf(this),1)[0]):Et(i.tags,t,this))}function se(t,e){for(var n,i=this.__.head,r=et();i;)if(n=i.nextSibling,r.appendChild(i),(i=n)===this.__.tail){r.appendChild(i),t.insertBefore(r,e.__.head);break}}function ae(t,e,n){var i={};return i[t.key]=e,t.pos&&(i[t.pos]=n),i}function ue(t,e){t.splice(e,1),this.unmount(),zt(this.parent,this,this.__.tagName,!0)}function le(t,e,n){var i=typeof G(t,f)!==b||Q(t,f),r=G(t,v),s=!!r&&F.hasExpr(r),a=Nt(t),u=o[a],l=t.parentNode,c=Y(),h=At(t),m=G(t,d),g=[],_=t.innerHTML,x=!o[a],w="VIRTUAL"===t.tagName,k=[];return Q(t,p),Q(t,v),(n=F.loopKeys(n)).isLoop=!0,m&&Q(t,d),l.insertBefore(c,t),l.removeChild(t),n.update=function(){n.value=F(n.val,e);var o=n.value,l=et(),d=!dt(o)&&!ft(o),p=c.parentNode,f=[],v=d&&!!o;if(p){d&&(o=o?Object.keys(o).map(function(t){return ae(n,o[t],t)}):[]);var b=0;vt(o,function(c,E){var A=E-b,N=!v&&n.key?ae(n,c,E):c;if(!m||F(m,q(K(e),N))){var C=function(t,e,n,i){return t?i?F(t,n):e[t]:e}(r,c,N,s),O=!d&&i&&typeof c===y||r,S=k.indexOf(C),I=-1===S,M=!I&&O?S:A,T=g[M],L=A>=k.length,j=O&&I||!O&&!T||!g[A];j?((T=be(u,{parent:e,isLoop:!0,isAnonymous:x,tagName:a,root:t.cloneNode(x),item:N,index:A},_)).mount(),L?function(t,e){e?Ut.call(this,t):t.appendChild(this.root)}.apply(T,[l||p,w]):function(t,e,n){n?Ut.apply(this,[t,e]):nt(t,this.root,e.root)}.apply(T,[p,g[A],w]),L||k.splice(A,0,N),g.splice(A,0,T),h&&Et(e.tags,a,T,!0)):M!==A&&O&&((r||mt(o,k[M]))&&(function(t,e,n){n?se.apply(this,[t,e]):nt(t,this.root,e.root)}.apply(T,[p,g[A],w]),g.splice(A,0,g.splice(M,1)[0]),k.splice(A,0,k.splice(M,1)[0])),n.pos&&(T[n.pos]=A),!h&&T.tags&&function(t){var e=this;vt(Object.keys(this.tags),function(n){oe.apply(e.tags[n],[n,t])})}.call(T,A)),q(T.__,{item:N,index:A,parent:e}),f[A]=C,j||T.update(N)}else b++}),function(t,e,n){for(var i=e.length,r=t.length-n;i>r;)i--,ue.apply(e[i],[e,i])}(o,g,b),k=f.slice(),p.insertBefore(l,c)}},n.unmount=function(){vt(g,function(t){t.unmount()})},n}var ce={init:function(t,e,n,i){return this.dom=t,this.attr=n,this.rawValue=i,this.parent=e,this.hasExp=F.hasExpr(i),this},update:function(){var t=this.value,e=this.parent&&$t(this.parent),n=this.dom.__ref||this.tag||this.dom;this.value=this.hasExp?F(this.rawValue,this.parent):this.rawValue,!at(t)&&e&&zt(e.refs,t,n),!at(this.value)&&ft(this.value)?(e&&Et(e.refs,this.value,n,null,this.parent.__.index),this.value!==t&&T(this.dom,this.attr,this.value)):Q(this.dom,this.attr),this.dom.__ref||(this.dom.__ref=n)},unmount:function(){var t=this.tag||this.dom,e=this.parent&&$t(this.parent);!at(this.value)&&e&&zt(e.refs,this.value,t)}};function de(t,e,n,i){return K(ce).init(t,e,n,i)}function pe(t){vt(t,function(t){t.unmount?t.unmount(!0):t.tagName?t.tag.unmount(!0):t.unmount&&t.unmount()})}var fe={init:function(t,e,n){Q(t,d),q(this,{tag:e,expr:n,stub:Y(),pristine:t});var i=t.parentNode;return i.insertBefore(this.stub,t),i.removeChild(t),this},update:function(){this.value=F(this.expr,this.tag),this.stub.parentNode&&(this.value&&!this.current?(this.current=this.pristine.cloneNode(!0),this.stub.parentNode.insertBefore(this.current,this.stub),this.expressions=me.apply(this.tag,[this.current,!0])):!this.value&&this.current&&(this.unmount(),this.current=null,this.expressions=[]),this.value&&qt.call(this.tag,this.expressions))},unmount:function(){this.current&&(this.current._tag?this.current._tag.unmount():this.current.parentNode&&this.current.parentNode.removeChild(this.current)),pe(this.expressions||[])}};function he(t,e,n){return K(fe).init(t,e,n)}function me(t,e){var n=this,i=[];return rt(t,function(r){var o,s,a=r.nodeType;if((e||r!==t)&&(3===a&&"STYLE"!==r.parentNode.tagName&&F.hasExpr(r.nodeValue)&&i.push({dom:r,expr:r.nodeValue}),1===a)){var u="VIRTUAL"===r.tagName;if(o=G(r,p))return u&&T(r,"loopVirtual",!0),i.push(le(r,n,o)),!1;if(o=G(r,d))return i.push(he(r,n,o)),!1;if((o=G(r,c))&&F.hasExpr(o))return i.push({isRtag:!0,expr:o,dom:r,attrs:[].slice.call(r.attributes)}),!1;if(s=At(r),u&&(G(r,"virtualized")&&r.parentElement.removeChild(r),s||G(r,"virtualized")||G(r,"loopVirtual")||(s={tmpl:r.outerHTML})),s&&(r!==t||e)){var l=G(r,c);if(!u||l)return l&&u&&wt("Virtual tags shouldn't be used together with the \""+c+'" attribute - https://github.com/riot/riot/issues/2511'),i.push(Ft(s,{root:r,parent:n},r.innerHTML,n)),!1;T(r,"virtualized",!0);var f=be({tmpl:r.outerHTML},{root:r,parent:n},r.innerHTML);i.push(f)}ve.apply(n,[r,r.attributes,function(t,e){e&&i.push(e)}])}}),i}function ve(t,e,n){var i=this;vt(e,function(e){if(!e)return!1;var r,o=e.name,a=pt(o);mt(l,o)&&t.tagName.toLowerCase()!==s?r=de(t,i,o,e.value):F.hasExpr(e.value)&&(r={dom:t,expr:e.value,attr:o,bool:a}),n(e,r)})}function ge(t){var e=this.__,n=e.isAnonymous,i=e.skipAnonymous;_t(this,"isMounted",t),n&&i||(t?this.trigger("mount"):(this.trigger("unmount"),this.off("*"),this.__.wasCreated=!1))}function be(t,e,n){void 0===t&&(t={}),void 0===e&&(e={});var i,o=e.context||{},s=e.opts||{},l=e.parent,c=e.isLoop,d=!!e.isAnonymous,p=J.skipAnonymousTags&&d,f=e.item,h=e.index,m=t.tmpl,v=[],b=e.root,y=e.tagName||Nt(b),_="virtual"===y,x=!_&&!m;return x||c&&d?i=b:(_||(b.innerHTML=""),i=Ht(m,n,ct(b))),p||z(o),t.name&&b._tag&&b._tag.unmount(!0),_t(o,"__",{impl:t,root:b,skipAnonymous:p,implAttrs:[],isAnonymous:d,instAttrs:[],innerHTML:n,tagName:y,index:h,isLoop:c,isInline:x,item:f,parent:l,listeners:[],virts:[],wasCreated:!1,tail:null,head:null}),[["isMounted",!1],["_riot_id",yt()],["root",b],["opts",s,{writable:!0,enumerable:!0}],["parent",l||null],["tags",{}],["refs",{}],["update",function(t){return function(t,e,n){var i=t.__,r={},o=t.isMounted&&!i.skipAnonymous;return i.isAnonymous&&i.parent&&q(t,i.parent),q(t,e),Kt.apply(t,[i.isLoop,i.parent,i.isAnonymous,r,i.instAttrs]),o&&t.isMounted&&ut(t.shouldUpdate)&&!t.shouldUpdate(e,r)?t:(q(t.opts,r),o&&t.trigger("update",e),qt.call(t,n),o&&t.trigger("updated"),t)}(o,t,v)}],["mixin",function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return function(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];return vt(e,function(e){var n,i,r=[],o=["init","__proto__"];e=ft(e)?ee(e):e,n=ut(e)?new e:e;var s=Object.getPrototypeOf(n);do{r=r.concat(Object.getOwnPropertyNames(i||n))}while(i=Object.getPrototypeOf(i||n));vt(r,function(e){if(!mt(o,e)){var i=U(n,e)||U(s,e),r=i&&(i.get||i.set);!t.hasOwnProperty(e)&&r?Object.defineProperty(t,e,i):t[e]=ut(n[e])?n[e].bind(t):n[e]}}),n.init&&n.init.bind(t)(t.opts)}),t}.apply(void 0,[o].concat(t))}],["mount",function(){return function(t,e,n,i){var r=t.__,o=r.root;o._tag=t,ve.apply(r.parent,[o,o.attributes,function(e,n){!r.isAnonymous&&ce.isPrototypeOf(n)&&(n.tag=t),e.expr=n,r.instAttrs.push(e)}]),tt(r.impl.attrs,function(t,e){r.implAttrs.push({name:t,value:e})}),ve.apply(t,[o,r.implAttrs,function(t,e){e?n.push(e):T(o,t.name,t.value)}]),Kt.apply(t,[r.isLoop,r.parent,r.isAnonymous,i,r.instAttrs]);var s=ee(a);if(s&&!r.skipAnonymous)for(var u in s)s.hasOwnProperty(u)&&t.mixin(s[u]);if(r.impl.fn&&r.impl.fn.call(t,i),r.skipAnonymous||t.trigger("before-mount"),vt(me.apply(t,[e,r.isAnonymous]),function(t){return n.push(t)}),t.update(r.item),!r.isAnonymous&&!r.isInline)for(;e.firstChild;)o.appendChild(e.firstChild);if(_t(t,"root",o),!r.skipAnonymous&&t.parent){var l=$t(t.parent);l.one(l.isMounted?"updated":"mount",function(){ge.call(t,!0)})}else ge.call(t,!0);return t.__.wasCreated=!0,t}(o,i,v,s)}],["unmount",function(t){return function(t,e,n){var i=t.__,o=i.root,s=r.indexOf(t),a=o.parentNode;if(i.skipAnonymous||t.trigger("before-unmount"),tt(i.impl.attrs,function(t){gt(t,u)&&(t=t.slice(u.length)),Q(o,t)}),t.__.listeners.forEach(function(t){Object.keys(t[g]).forEach(function(e){t.removeEventListener(e,t[g][e])})}),-1!==s&&r.splice(s,1),i.parent&&!i.isAnonymous){var l=$t(i.parent);i.isVirtual?Object.keys(t.tags).forEach(function(e){return zt(l.tags,e,t.tags[e])}):zt(l.tags,i.tagName,t)}return t.__.virts&&vt(t.__.virts,function(t){t.parentNode&&t.parentNode.removeChild(t)}),pe(n),vt(i.instAttrs,function(t){return t.expr&&t.expr.unmount&&t.expr.unmount()}),e?W(o,""):a&&a.removeChild(o),i.onUnmount&&i.onUnmount(),t.isMounted||ge.call(t,!0),ge.call(t,!1),delete o._tag,t}(o,t,v)}]].reduce(function(t,e){var n=e[0],i=e[1],r=e[2];return _t(o,n,i,r),t},q(o,f))}function ye(t,e,n,i){var s,a=o[e],u=o[e].class,l=i||(u?K(u.prototype):{}),c=t._innerHTML=t._innerHTML||t.innerHTML,d=q({root:t,opts:n,context:l},{parent:n?n.parent:null});return a&&t&&(s=be(a,d,c)),s&&s.mount&&(s.mount(!0),mt(r,s)||r.push(s)),s}var _e=Object.freeze({arrayishAdd:Et,getTagName:Nt,inheritParentProps:Ct,mountTo:ye,selectTags:Jt,arrayishRemove:zt,getTag:At,initChildTag:Ft,moveChildTag:oe,makeReplaceVirtual:Dt,getImmediateCustomParentTag:$t,makeVirtual:Ut,moveVirtual:se,unmountAll:pe,createIfDirective:he,createRefDirective:de}),xe=J,we={tmpl:F,brackets:V,styleManager:R,vdom:r,styleNode:R.styleNode,dom:ot,check:ht,misc:kt,tags:_e},ke=Xt,Ee=Yt,Ae=Zt,Ne=Gt,Ce=ee,Oe=ne,Se=ie,Ie=z,Me=q({},re,{observable:z,settings:xe,util:we});t.settings=xe,t.util=we,t.Tag=ke,t.tag=Ee,t.tag2=Ae,t.mount=Ne,t.mixin=Ce,t.update=Oe,t.unregister=Se,t.version="v3.13.2",t.observable=Ie,t.default=Me,Object.defineProperty(t,"__esModule",{value:!0})}(e)},function(t,e,n){"use strict";n.r(e);var i=n(0),r=n.n(i),o=(n(2),n(3),n(4),n(5),{init:function(t){},getIndexFromEvent:function(t){var e=t.target.closest("li");return Array.from(e.closest("ul").children).indexOf(e)},touchHandler:function(t){var e=t.changedTouches[0],n="";switch(t.type){case"touchstart":n="mousedown";break;case"touchmove":n="mousemove";break;case"touchend":n="mouseup";break;default:return}var i=document.createEvent("MouseEvent");i.initMouseEvent(n,!0,!0,window,1,e.screenX,e.screenY,e.clientX,e.clientY,!1,!1,!1,!1,0,null),e.target.dispatchEvent(i)}});r.a.mixin("utils",o),r.a.mount("app")},function(t,e,n){!function(t,e){"use strict";var n="isMounted opts".split(" ");function i(t){e.util.styleManager.inject();for(var r=document.querySelectorAll(t+", [data-is="+t+"]"),o=[],s=0;s<r.length;s++){var a,u=r[s],l=u._tag;i.trigger("before-unmount",l),l.unmount(!0),u.innerHTML=l.__.innerHTML,(l.__.instAttrs||[]).map(function(t){u.setAttribute(t.name,t.value)});var c={};for(p in l.opts)c[p]=l.opts[p];c.parent=l.parent,i.trigger("before-mount",c,l);var d=e.mount(u,c)[0];for(var p in l)a=l[p],~n.indexOf(p)||(d[p]=a);d.update(),o.push(d),i.trigger("after-mount",d,l)}return o}e.observable(i),e.reload=i,e.default&&(e.default.reload=i),t.reload=i,t.default=i,Object.defineProperty(t,"__esModule",{value:!0})}(e,n(0))},function(t,e,n){n(0).tag2("app",'<header class="z-depth-1"> <input-form visible="{true}" onlostfocus="{todo.remove}" save_cb="{todo.add}"></input-form> <div class="switch"> <label> Edit <input type="checkbox" onclick="{todo.toggleEdit}" checked="{this.state.editMode}"><span class="lever"></span> </label> </div> <div class="switch"> <label> Show finished <input type="checkbox" onclick="{todo.toggleShowCompleted}" checked="{this.state.showCompleted}"><span class="lever"></span> </label> </div> </header> <main> <item-list items="{state.items}" toggle_complete_cb="{todo.toggleComplete}" remove_item_cb="{todo.remove}" move_item_cb="{todo.move}" update_item_cb="{todo.update}" edit_mode="{this.state.editMode}" show_completed="{this.state.showCompleted}"></item-list> </main>','app .switch,[data-is="app"] .switch{ display: inline-block; margin-left: 1em; padding-bottom: 0.5em; background-color: white; } app .switch label .lever,[data-is="app"] .switch label .lever{ margin-left: 3px; } app header,[data-is="app"] header{ z-index: 100; width: 100vw; height: 18vh; background-color: white; } app main,[data-is="app"] main{ height: 82vh; overflow: scroll; -webkit-overflow-scrolling: touch; } app footer.page-foter,[data-is="app"] footer.page-foter{ background-color: black; }',"",function(t){this.mixin("utils"),this.state={items:[],editMode:!1,showCompleted:!0},this.restoreState=(()=>{let t=JSON.parse(window.localStorage.getItem("riotToDo"));t&&(this.state=t)}),this.persistState=(()=>{window.localStorage.setItem("riotToDo",JSON.stringify(this.state))}),this.on("before-mount",this.restoreState),todoControler={toggleEdit:()=>{this.state.editMode=!this.state.editMode,this.persistState()},toggleShowCompleted:()=>{this.state.showCompleted=!this.state.showCompleted,this.persistState()},toggleComplete:t=>{let e=this.getIndexFromEvent(t);this.state.items[e].done=!this.state.items[e].done,this.persistState()},add:t=>{this.state.items.unshift({text:t,done:!1}),this.persistState(),this.update()},update:(t,e)=>{this.state.items[e].text=t,this.persistState(),this.update()},remove:t=>{let e=t.target.closest("li"),n=this.getIndexFromEvent(t);e.classList.add("scale-out"),setTimeout(()=>{e.classList.remove("scale-out"),this.state.items.splice(n,1),this.persistState(),this.update()},200)},move:(t,e)=>{this.state.items.splice(e,0,this.state.items.splice(t,1)[0]),this.persistState(),this.update()}},this.todo=todoControler})},function(t,e,n){n(0).tag2("input-form",'<form class="cyan lighten-5" onsubmit="{add}"> <div class="inputarea"> <div class="input-field inline"> <input ref="inputField" id="newItem" type="text" onkeyup="{edit}"> <label for="newItem">Add new Item...</label> </div><a class="btn-floating {disabled: !this.text}" onclick="{add}"><i class="material-icons">add</i></a> </div> </form>','input-form form,[data-is="input-form"] form{ padding-top: 1em; display: flex; justify-content: center; } input-form #newItem,[data-is="input-form"] #newItem{ font-size: 1.4rem; margin-right: 1em; width: 70vw; }',"",function(t){this.text="",this.edit=(t=>{this.text=t.target.value}),this.add=(t=>{this.text&&(this.opts.save_cb(this.text),this.text="",this.refs.inputField.value="",this.refs.inputField.focus()),t.preventDefault()})})},function(t,e,n){n(0).tag2("item-list",'<div class="todolist"> <ul class="collection" id="todolist"> <li class="collection-item scale-transition" each="{item in this.opts.items}" if="{this.opts.show_completed &amp;&amp; item.done || !item.done}"> <label> <div if="{!this.opts.edit_mode}"> <input type="checkbox" checked="{item.done}" onclick="{this.opts.toggle_complete_cb}"><span class="{done: item.done}" onclick="{edit}">{item.text}</span> </div> <div if="{this.opts.edit_mode}"><a class="waves-effect waves-light btn-flat" onclick="{this.opts.remove_item_cb}"><i class="material-icons">remove_circle</i></a><span class="{done: item.done}" onclick="{edit}">{item.text}</span><a class="secondary-content drag_handle"><i class="material-icons">drag_handle</i></a></div> </label> </li> </ul> <div class="modal" id="modal" ref="modal"> <div class="modal-content"> <form onsubmit="{saveEdit}"> <div class="input-field"> <input ref="editInput" type="text" id="editItem" value="Text"> <label for="editItem">Edit</label> </div> </form> </div> <div class="modal-footer"><a class="modal-close waves-effect waves-red btn-flat">Cancel </a><a class="modal-close waves-effect waves-green btn-flat" onclick="{saveEdit}">Save </a></div> </div> </div>','item-list ul,[data-is="item-list"] ul{ height: 100% } item-list .todolist [type="checkbox"]+span.done,[data-is="item-list"] .todolist [type="checkbox"]+span.done{ text-decoration: line-through; color: #9e9e9e; } item-list .todolist span.done,[data-is="item-list"] .todolist span.done{ text-decoration: line-through; color: #9e9e9e; } item-list .todolist .collection .collection-item,[data-is="item-list"] .todolist .collection .collection-item{ line-height: 2.5rem; } item-list .todolist [type="checkbox"]+span,[data-is="item-list"] .todolist [type="checkbox"]+span{ font-size: 1.3rem; color: black; } item-list .todolist span,[data-is="item-list"] .todolist span{ font-size: 1.3rem; color: black; } item-list .todolist,[data-is="item-list"] .todolist{ position: relative; overflow: auto; }','class="z-depth-1"',function(t){this.mixin("utils"),this.selectedItemIndex=0,this.sort={from:0,to:0},this.updateEditMode=(()=>{this.opts.edit_mode?$("#todolist").sortable("enable"):$("#todolist").sortable("disable")}),this.edit=(t=>{this.opts.edit_mode&&(this.modal.open(),this.selectedItemIndex=this.getIndexFromEvent(event),this.refs.editInput.value=t.target.innerHTML,this.refs.editInput.focus())}),this.saveEdit=(t=>{this.modal.close(),this.opts.update_item_cb(this.refs.editInput.value,this.selectedItemIndex),t.preventDefault()}),this.on("mount",()=>{document.addEventListener("touchstart",this.touchHandler,!0),document.addEventListener("touchmove",this.touchHandler,!0),document.addEventListener("touchend",this.touchHandler,!0),document.addEventListener("touchcancel",this.touchHandler,!0),this.modal=M.Modal.init(this.refs.modal,{}),$("#todolist").sortable({handle:".drag_handle",axis:"y",start:(t,e)=>{this.sort.from=this.getIndexFromEvent(t.originalEvent)},stop:(t,e)=>{this.sort.to=this.getIndexFromEvent(t.originalEvent),this.opts.move_item_cb(this.sort.from,this.sort.to)}}),$("#todolist").disableSelection(),this.updateEditMode()}),this.on("update",()=>{this.updateEditMode()})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,